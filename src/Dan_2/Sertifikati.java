/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Dan_2;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Security;
import java.security.Signature;
import java.security.SignatureException;
import java.security.UnrecoverableKeyException;
import java.security.cert.Certificate;
import java.security.cert.CertificateEncodingException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.Arrays;
import java.util.Date;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.security.auth.x500.X500Principal;
import javax.swing.JFrame;
import org.bouncycastle.jcajce.provider.asymmetric.x509.CertificateFactory;
import org.bouncycastle.jce.PKCS10CertificationRequest;
import org.bouncycastle.util.encoders.Base64;
import sun.security.pkcs10.PKCS10;
import sun.security.x509.AlgorithmId;
import sun.security.x509.CertificateAlgorithmId;
import sun.security.x509.CertificateSerialNumber;
import sun.security.x509.CertificateValidity;
import sun.security.x509.CertificateVersion;
import sun.security.x509.CertificateX509Key;
import sun.security.x509.X500Name;
import sun.security.x509.X509CertImpl;
import sun.security.x509.X509CertInfo;
import sun.security.x509.X509Key;

/**
 *
 * @author Marko
 */
public class Sertifikati extends javax.swing.JFrame {

    /**
     * Creates new form Sertifikati
     */
    public Sertifikati() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        showCertificate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        encodeCertificate = new javax.swing.JButton();
        showEncodedCertificate = new javax.swing.JButton();
        generateAESKey = new javax.swing.JButton();
        generateRSAKey = new javax.swing.JButton();
        showKeys = new javax.swing.JButton();
        generateCertificate = new javax.swing.JButton();
        generateKeystore = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1000, 500));

        showCertificate.setText("Show certificate");
        showCertificate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showCertificateActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        encodeCertificate.setText("Encode certificate with Base64");
        encodeCertificate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encodeCertificateActionPerformed(evt);
            }
        });

        showEncodedCertificate.setText("Show Base64 certificate");
        showEncodedCertificate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showEncodedCertificateActionPerformed(evt);
            }
        });

        generateAESKey.setText("Generate AES key");
        generateAESKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateAESKeyActionPerformed(evt);
            }
        });

        generateRSAKey.setText("Generate RSA key");
        generateRSAKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateRSAKeyActionPerformed(evt);
            }
        });

        showKeys.setText("Show keys from keystore");
        showKeys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showKeysActionPerformed(evt);
            }
        });

        generateCertificate.setText("Generate certificate");
        generateCertificate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateCertificateActionPerformed(evt);
            }
        });

        generateKeystore.setText("Generate keystore");
        generateKeystore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateKeystoreActionPerformed(evt);
            }
        });

        jButton1.setText("Generate .csr file");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(showCertificate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(generateCertificate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(encodeCertificate, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(showEncodedCertificate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 524, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(generateRSAKey, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(generateAESKey, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(generateKeystore, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(showKeys, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))))
                        .addGap(38, 38, 38))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateCertificate)
                    .addComponent(generateKeystore))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showCertificate)
                    .addComponent(generateAESKey))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encodeCertificate)
                    .addComponent(generateRSAKey))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showEncodedCertificate)
                    .addComponent(showKeys))
                .addGap(25, 25, 25)
                .addComponent(jButton1)
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showCertificateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showCertificateActionPerformed
        // TODO add your handling code here:
        String putanja = "sertifikat.der";
        try {
            FileInputStream fis = new FileInputStream(putanja);
            CertificateFactory cf = new CertificateFactory();
            X509Certificate certificate = (X509Certificate) cf.engineGenerateCertificate(fis);
            jTextArea1.setText("Sertifikat:\n");
            jTextArea1.append("Owner: "+certificate.getSubjectDN()+"\n");
            jTextArea1.append("Issuer: "+certificate.getIssuerDN()+"\n");
            jTextArea1.append("Serial number: "+certificate.getSerialNumber()+"\n");
            jTextArea1.append("Valid from: "+certificate.getNotBefore()+" until: "+certificate.getNotAfter()+"\n");
            jTextArea1.append("Certificate fingerprints:\n");
            jTextArea1.append("\tSHA1: "+getSHAFingerprint(certificate, "SHA-1")+"\n");
            jTextArea1.append("\tSHA256: "+getSHAFingerprint(certificate, "SHA-256")+"\n");
            jTextArea1.append("Signature algorithm name: "+certificate.getSigAlgName()+"\n");
            jTextArea1.append("Subject Public Key algorithm: "+certificate.getPublicKey().getAlgorithm()+"\n");
            jTextArea1.append("Version: "+certificate.getVersion()+"\n");
        } catch (FileNotFoundException | CertificateException ex) {
            Logger.getLogger(Sertifikati.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_showCertificateActionPerformed

    private void encodeCertificateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encodeCertificateActionPerformed
        // TODO add your handling code here:
        
        String putanjaDER = "sertifikat.der";
        String putanjaBase64 = "sertifikat.b64";
        
        try {
            FileInputStream fis = new FileInputStream(putanjaDER);
            FileOutputStream fos = new FileOutputStream(putanjaBase64);
            
            byte[] cerBytes = fis.readAllBytes();
            String Base64Cert = Base64.toBase64String(cerBytes);
            fos.write(Base64Cert.getBytes());
            jTextArea1.setText("Encoding with Base64 was successful.");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Sertifikati.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Sertifikati.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_encodeCertificateActionPerformed

    private void showEncodedCertificateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showEncodedCertificateActionPerformed
        // TODO add your handling code here:
        String putanja = "sertifikat.b64";
        try {
            FileInputStream fis = new FileInputStream(putanja); 
            byte[] b64Bytes = fis.readAllBytes(); 
            byte[] bytes = Base64.decode(b64Bytes); 
            ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
            CertificateFactory cf = new CertificateFactory();
            X509Certificate certificate = (X509Certificate) cf.engineGenerateCertificate(bais);
            
            jTextArea1.setText("Sertifikat:\n");
            jTextArea1.append("Owner: "+certificate.getSubjectDN()+"\n");
            jTextArea1.append("Issuer: "+certificate.getIssuerDN()+"\n");
            jTextArea1.append("Serial number: "+certificate.getSerialNumber()+"\n");
            jTextArea1.append("Valid from: "+certificate.getNotBefore()+" until: "+certificate.getNotAfter()+"\n");
            jTextArea1.append("Certificate fingerprints:\n");
            jTextArea1.append("\tSHA1: "+getSHAFingerprint(certificate, "SHA-1")+"\n");
            jTextArea1.append("\tSHA256: "+getSHAFingerprint(certificate, "SHA-256")+"\n");
            jTextArea1.append("Signature algorithm name: "+certificate.getSigAlgName()+"\n");
            jTextArea1.append("Subject Public Key algorithm: "+certificate.getPublicKey().getAlgorithm()+"\n");
            jTextArea1.append("Version: "+certificate.getVersion()+"\n");
        } catch (FileNotFoundException | CertificateException ex) {
            Logger.getLogger(Sertifikati.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Sertifikati.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_showEncodedCertificateActionPerformed

    private void generateAESKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateAESKeyActionPerformed
        FileInputStream fis = null;
        try {
            // TODO add your handling code here:
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            char[] lozinka = {'S','i','n','g','i','d','u','n','u','m'};
            fis = new FileInputStream("SkladisteKljuceva.keystore");
            ks.load(fis, lozinka);
            fis.close();
            
            KeyGenerator kg = KeyGenerator.getInstance("AES");
            SecretKey kljuc = kg.generateKey();
            
            ks.setKeyEntry("AEStajniKljuc", kljuc, lozinka, null);
            
            FileOutputStream fos = new FileOutputStream("SkladisteKljuceva.keystore");
            ks.store(fos, lozinka);
            fos.close();
            Arrays.fill(lozinka, '\u0000');
            jTextArea1.setText("AES key has been stored in Keystore!");
        } catch (FileNotFoundException  ex) {
            Logger.getLogger(Sertifikati.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | NoSuchAlgorithmException | CertificateException | KeyStoreException ex) {
            Logger.getLogger(Sertifikati.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_generateAESKeyActionPerformed

    private void showKeysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showKeysActionPerformed
        FileInputStream fis = null;
        try {
            // TODO add your handling code here:
            KeyStore skladiste = KeyStore.getInstance(KeyStore.getDefaultType());
            fis = new FileInputStream("SkladisteKljuceva.keystore");
            char[] lozinka = {'S','i','n','g','i','d','u','n','u','m'};
            skladiste.load(fis, lozinka);
            
            fis.close();
            
            for (Enumeration<String> e = skladiste.aliases(); e.hasMoreElements();) {
                String alijas = (String) e.nextElement();
                if (skladiste.isKeyEntry(alijas)) {
                    Key key = skladiste.getKey(alijas, lozinka);
                    if (key instanceof SecretKey) {
                        // AES ključ
                        SecretKey secretKey = (SecretKey) key;
                        jTextArea1.setText("Found alias: " + alijas + "\n");
                        jTextArea1.append("AES key: " + Arrays.toString(secretKey.getEncoded()) + "\n");
                    }
                    
                    if (key instanceof PrivateKey) {
                        // RSA privatni ključ
                        PrivateKey privateKey = (PrivateKey) key;
                        jTextArea1.append("Found alias: " + alijas + "\n");
                        byte[] privateKeyStr = Base64.encode(privateKey.getEncoded());
                        jTextArea1.append("Private RSA key: " + Arrays.toString(privateKeyStr) + "\n");
                    }
                }
            }
            Arrays.fill(lozinka, '\u0000');
        } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | UnrecoverableKeyException ex) {
            Logger.getLogger(Sertifikati.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_showKeysActionPerformed

    private void generateRSAKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateRSAKeyActionPerformed
        // TODO add your handling code here:
        FileInputStream fis = null;
        try {
            // TODO add your handling code here:
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            fis = new FileInputStream("SkladisteKljuceva.keystore");
            char[] lozinka = {'S', 'i', 'n', 'g', 'i', 'd', 'u', 'n', 'u', 'm'};
            ks.load(fis, lozinka);
            fis.close();

            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
            keyPairGenerator.initialize(2048);
            KeyPair keyPair = keyPairGenerator.generateKeyPair();
            PrivateKey privateKey = keyPair.getPrivate();
            PublicKey publicKey = keyPair.getPublic();
            X509Certificate cert = generateCertificateForPrivateKey(publicKey, privateKey);

            ks.setKeyEntry("RSAPrivatniKljuc", privateKey, lozinka, new Certificate[]{cert});
            FileOutputStream fos = new FileOutputStream("SkladisteKljuceva.keystore");
            ks.store(fos, lozinka);
            fos.close();
            Arrays.fill(lozinka, '\u0000');
            jTextArea1.setText("RSA keys have been stored in Keystore!\n");
        } catch (FileNotFoundException  ex) {
            Logger.getLogger(Sertifikati.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | NoSuchAlgorithmException | CertificateException | KeyStoreException ex) {
            Logger.getLogger(Sertifikati.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Sertifikati.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_generateRSAKeyActionPerformed

    private void generateKeystoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateKeystoreActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            //Kreiranje novog praznog skladišta ključeva - Java KeyStore
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType()) ;
            ks.load(null,"".toCharArray());
            //Otvaranje izlaznog toka podataka ka lokaciji skladišta
            FileOutputStream fos =
                    new FileOutputStream(new File("SkladisteKljuceva.keystore"));
            //Postavljanje lozinke za pristup skladištu
            char[] lozinka = {'S','i','n','g','i','d','u','n','u','m'};
            ks.store(fos, lozinka);
            //Čišćenje niza u kome je lozinka bila
            Arrays.fill(lozinka, '\u0000' ) ;
            jTextArea1.setText("Empty keystore has been made!\n");        
            jTextArea1.append("Keystore type: "+ks.getType());
        } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException ex) {
            Logger.getLogger(Sertifikati.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_generateKeystoreActionPerformed

    private void generateCertificateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateCertificateActionPerformed
        // TODO add your handling code here:
        try {
            // Učitaj KeyStore
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            FileInputStream fis = new FileInputStream("SkladisteKljuceva.keystore");
            char[] lozinka = {'S', 'i', 'n', 'g', 'i', 'd', 'u', 'n', 'u', 'm'};
            ks.load(fis, lozinka);
            fis.close();

            // Dobavi sertifikat iz KeyStore-a
            Certificate certificate = ks.getCertificate("RSAPrivatniKljuc");
            //Certificate privateKey = ks.getCertificate("RSAPrivatniKljuc", lozinka);

            // Sačuvaj sertifikat u DER formatu
            FileOutputStream fos = new FileOutputStream("sertifikat.der");
            fos.write(certificate.getEncoded());
            fos.close();
            Arrays.fill(lozinka, '\u0000' ) ;
            jTextArea1.setText("The certificate has been successfully exported into new .der file.");
        } catch (FileNotFoundException | KeyStoreException | NoSuchAlgorithmException  ex) {
        } catch (IOException | CertificateException ex) {
            Logger.getLogger(Sertifikati.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_generateCertificateActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            FileInputStream fis = new FileInputStream("SkladisteKljuceva.keystore");
            char[] lozinka = {'S', 'i', 'n', 'g', 'i', 'd', 'u', 'n', 'u', 'm'};
            ks.load(fis, lozinka);
            fis.close();
            
            X509Certificate x509cert = (X509Certificate) ks.getCertificate("RSAPrivatniKljuc");
            //Podaci o vlasniku sertifikata
            X500Principal principal = x509cert.getSubjectX500Principal();
            X500Name x500name = new X500Name(principal.getName());
            
            PrivateKey privateKey = (PrivateKey) ks.getKey("RSAPrivatniKljuc", lozinka);
            PublicKey publicKey = x509cert.getPublicKey();
            
            String sigAlg = x509cert.getSigAlgName();
            PKCS10 pkcs10 = new PKCS10(publicKey);
            Signature signature = Signature.getInstance(sigAlg);
            signature.initSign(privateKey);
            pkcs10.encodeAndSign(x500name, signature);
            
            FileOutputStream fos = new FileOutputStream("zahtev.csr");
            fos.write(pkcs10.getEncoded());
            fos.close();
            jTextArea1.setText("New .csr file has been made!");
            Arrays.fill(lozinka, '\u0000' ) ;
        } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | UnrecoverableKeyException | InvalidKeyException | SignatureException ex) {
            Logger.getLogger(Sertifikati.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    
    private X509Certificate generateCertificateForPrivateKey(PublicKey publicKey, PrivateKey privateKey) throws Exception {
        X509CertInfo certInfo = new X509CertInfo();
        Date startDate = new Date();
        Date endDate = new Date(startDate.getTime() + 365 * 24 * 60 * 60 * 1000L); // Važnost sertifikata: 1 godina
        CertificateValidity interval = new CertificateValidity(startDate, endDate);
        java.math.BigInteger sn = new java.math.BigInteger(64, new SecureRandom());
        X500Name owner = new X500Name("CN=Ime i prezime, O=Organizacija, C=RS");

        certInfo.set(X509CertInfo.VALIDITY, interval);
        certInfo.set(X509CertInfo.SERIAL_NUMBER, new CertificateSerialNumber(sn));
        certInfo.set(X509CertInfo.SUBJECT, owner);
        certInfo.set(X509CertInfo.ISSUER, owner);
        certInfo.set(X509CertInfo.KEY, new CertificateX509Key(publicKey));
        certInfo.set(X509CertInfo.VERSION, new CertificateVersion(CertificateVersion.V3));
        AlgorithmId algorithm = AlgorithmId.get("SHA256WithRSA");
        certInfo.set(X509CertInfo.ALGORITHM_ID, new CertificateAlgorithmId(algorithm));

        X509CertImpl cert = new X509CertImpl(certInfo);
        cert.sign(privateKey, "SHA256withRSA");
        return cert;
    }
    
    private static String getSHAFingerprint(X509Certificate certificate, String algorithm){
        try {
            byte[] encodedCert = certificate.getEncoded();
            MessageDigest md = MessageDigest.getInstance(algorithm);
            byte[] shaDigest = md.digest(encodedCert);
            StringBuilder sb = new StringBuilder();
            for(byte b : shaDigest){
                sb.append(String.format("%02X", b));
            }
            return sb.toString();
        } catch (CertificateEncodingException | NoSuchAlgorithmException ex) {
            Logger.getLogger(Sertifikati.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sertifikati.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        JFrame frame = new JFrame("Sertifikati");
        frame.setResizable(false);
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Sertifikati().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton encodeCertificate;
    private javax.swing.JButton generateAESKey;
    private javax.swing.JButton generateCertificate;
    private javax.swing.JButton generateKeystore;
    private javax.swing.JButton generateRSAKey;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton showCertificate;
    private javax.swing.JButton showEncodedCertificate;
    private javax.swing.JButton showKeys;
    // End of variables declaration//GEN-END:variables
}
